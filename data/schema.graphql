schema {
  query: Query
}

type Instrument implements Node {
  id: ID!
  instrumentType: String
  data: JSON
  createdAt: Int
  updatedAt: Int
}

type InstrumentConnection {
  pageInfo: PageInfo!
  edges: [InstrumentEdge]
}

type InstrumentEdge {
  node: Instrument
  cursor: String!
}

scalar JSON

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  song: Song
}

type Sequencer implements Node {
  id: ID!
  resolution: Int
  bars: Int
  createdAt: Int
  updatedAt: Int
  instruments(after: String, first: Int, before: String, last: Int): InstrumentConnection
}

type SequencerConnection {
  pageInfo: PageInfo!
  edges: [SequencerEdge]
}

type SequencerEdge {
  node: Sequencer
  cursor: String!
}

type Song implements Node {
  id: ID!
  tempo: Int
  createdAt: Int
  updatedAt: Int
  sequencers(after: String, first: Int, before: String, last: Int): SequencerConnection
}
